// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPSBackend.Data;

#nullable disable

namespace TPSBackend.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TPSBackend.Models.Atm", b =>
                {
                    b.Property<long>("AtmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AtmId"));

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.HasKey("AtmId");

                    b.ToTable("Atms");
                });

            modelBuilder.Entity("TPSBackend.Models.AtmTransaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransactionId"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<long>("AtmId")
                        .HasColumnType("bigint");

                    b.Property<double>("BalanceAfter")
                        .HasColumnType("float");

                    b.Property<double>("BalanceBefore")
                        .HasColumnType("float");

                    b.Property<DateTime>("TransactedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("TransactedById")
                        .HasColumnType("bigint");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<long?>("UserTransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("TransactionId");

                    b.HasIndex("AtmId");

                    b.HasIndex("TransactedById");

                    b.HasIndex("UserTransactionId");

                    b.ToTable("AtmTransactions");
                });

            modelBuilder.Entity("TPSBackend.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TPSBackend.Models.UserAccount", b =>
                {
                    b.Property<long>("UserAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserAccountId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AccountNumber")
                        .HasColumnType("bigint");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserAccountId");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("TPSBackend.Models.UserTransaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransactionId"));

                    b.Property<long?>("AccountFromId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AccountToId")
                        .HasColumnType("bigint");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("BalanceAfter")
                        .HasColumnType("float");

                    b.Property<double>("BalanceBefore")
                        .HasColumnType("float");

                    b.Property<DateTime>("TransactedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountFromId");

                    b.HasIndex("AccountToId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTransactions");
                });

            modelBuilder.Entity("TPSBackend.Models.AtmTransaction", b =>
                {
                    b.HasOne("TPSBackend.Models.Atm", "Atm")
                        .WithMany("AtmTransactions")
                        .HasForeignKey("AtmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPSBackend.Models.User", "TransactedBy")
                        .WithMany("AtmTransactions")
                        .HasForeignKey("TransactedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPSBackend.Models.UserTransaction", "UserTransaction")
                        .WithMany("AtmTransactions")
                        .HasForeignKey("UserTransactionId");

                    b.Navigation("Atm");

                    b.Navigation("TransactedBy");

                    b.Navigation("UserTransaction");
                });

            modelBuilder.Entity("TPSBackend.Models.UserAccount", b =>
                {
                    b.HasOne("TPSBackend.Models.User", "User")
                        .WithMany("UserAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TPSBackend.Models.UserTransaction", b =>
                {
                    b.HasOne("TPSBackend.Models.UserAccount", "AccountFrom")
                        .WithMany("UserTransactionsFrom")
                        .HasForeignKey("AccountFromId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TPSBackend.Models.UserAccount", "AccountTo")
                        .WithMany("UserTransactionsTo")
                        .HasForeignKey("AccountToId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TPSBackend.Models.User", "User")
                        .WithMany("UserTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountFrom");

                    b.Navigation("AccountTo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TPSBackend.Models.Atm", b =>
                {
                    b.Navigation("AtmTransactions");
                });

            modelBuilder.Entity("TPSBackend.Models.User", b =>
                {
                    b.Navigation("AtmTransactions");

                    b.Navigation("UserAccounts");

                    b.Navigation("UserTransactions");
                });

            modelBuilder.Entity("TPSBackend.Models.UserAccount", b =>
                {
                    b.Navigation("UserTransactionsFrom");

                    b.Navigation("UserTransactionsTo");
                });

            modelBuilder.Entity("TPSBackend.Models.UserTransaction", b =>
                {
                    b.Navigation("AtmTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
